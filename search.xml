<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024年诺贝尔化学奖</title>
      <link href="/posts/20241009181239.html"/>
      <url>/posts/20241009181239.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>【2024年诺贝尔化学奖揭晓】当地时间10月9日，瑞典皇家科学院宣布，将2024年诺贝尔化学奖授予David Baker，以表彰其在计算蛋白质设计方面的贡献，另一半则共同授予Demis Hassabis和John M. Jumper，以表彰其在蛋白质结构预测方面的贡献。<br><a href="https://www.yicai.com/brief/102305942.html">2024年诺贝尔化学奖揭晓</a></p></blockquote><h2 id="David-Baker"><a href="#David-Baker" class="headerlink" title="David Baker"></a>David Baker</h2><p>David Baker教授是计算蛋白质设计领域的世界领军人物之一，他所在的实验室在这一领域做出了许多开创性的贡献。Baker教授的研究主要集中在通过计算方法设计新型蛋白质，并在理解蛋白质的折叠、结构与功能的关系上取得了重要进展。以下是Baker教授及其团队在<strong>computational protein design（计算蛋白质设计）</strong>方面的一些重要工作和贡献：</p><p><strong>1. Rosetta软件包的开发</strong></p><p>David Baker教授的实验室开发了著名的<strong>Rosetta</strong>软件套件，这是蛋白质结构预测和设计领域中最广泛使用的工具之一。Rosetta的核心算法利用物理和统计学模型预测蛋白质的折叠方式，评估不同的蛋白质序列的稳定性，并通过优化序列-结构关系来设计新功能的蛋白质。</p><ul><li><strong>蛋白质结构预测</strong>：Rosetta的结构预测算法可以通过给定的氨基酸序列预测蛋白质的三维结构。这种能力极大地推动了结构生物学和计算生物学的发展。</li><li><strong>蛋白质设计</strong>：通过Rosetta，Baker教授及其团队设计了多种具有特定功能的蛋白质，包括新型酶、结合特定分子的蛋白质、具有药物潜力的蛋白质等。</li></ul><p><strong>2. De Novo蛋白质设计</strong></p><p>Baker教授的团队率先进行了<strong>De Novo蛋白质设计</strong>，即从头设计以前从未在自然界中存在的蛋白质。他们利用Rosetta软件，设计了多种稳定的、功能性的新型蛋白质。这些蛋白质具有精确的三维结构，能够执行特定的生物功能。</p><ul><li>2016年，Baker教授的团队在《科学》期刊上发表了一篇具有里程碑意义的文章，描述了设计具有稳定折叠的全新蛋白质。这个过程表明，基于物理学和统计学的模型可以成功预测蛋白质的折叠，并可以用于设计全新的蛋白质结构。</li></ul><p><strong>3. 蛋白质-蛋白质相互作用设计</strong></p><p>Baker实验室也在设计蛋白质间相互作用方面做出了重要贡献。他们能够通过计算设计出特异性强、亲和力高的蛋白质对，以促进蛋白质复合物的形成或阻断某些蛋白质-蛋白质相互作用。这在<strong>生物医学应用</strong>，如设计蛋白质抑制剂或调节剂方面具有重要潜力。</p><ul><li>他们成功设计了具有高度特异性的<strong>蛋白质结合域</strong>，这些蛋白质可以特异性地识别并结合到目标分子上，甚至超越了天然蛋白质的结合能力。</li></ul><p><strong>4. 功能性酶的设计</strong></p><p>Baker教授的团队还设计了<strong>新型的酶</strong>，这些酶能够催化自然界中不存在的化学反应。通过设计活性位点的几何形状以及关键残基的摆放位置，他们实现了对底物选择性和催化效率的计算优化。</p><ul><li>这些工作不仅对基础科学有重要贡献，还为生物技术、制药和工业应用提供了新工具。例如，他们设计了能够降解特定环境污染物的酶，为环境修复提供了潜在的解决方案。</li></ul><p><strong>5. AlphaFold对比和蛋白质结构预测</strong></p><p>在Google DeepMind团队的AlphaFold项目取得重大突破之后，Baker教授及其团队也通过Rosetta进一步推动了蛋白质结构预测领域的发展。虽然AlphaFold的预测精度在CASP（Critical Assessment of Structure Prediction）中得到了广泛认可，但Baker团队的Rosetta仍然是设计新蛋白质和功能化改造的重要工具，尤其是在设计特定结构和功能的蛋白质时。</p><p><strong>6. Foldit——公众参与的科学游戏</strong></p><p>Baker实验室推出了名为<strong>Foldit</strong>的科学游戏，允许公众通过在线游戏的方式帮助科学家折叠蛋白质。Foldit不仅是一个教育工具，还实际帮助解决了一些复杂的蛋白质结构问题。例如，Foldit的玩家们曾成功解开一种与HIV病毒有关的酶的结构，这为药物开发提供了重要线索。</p><p><strong>7. 生物医学应用</strong></p><p>Baker教授的蛋白质设计技术正在不断走向实际应用，特别是在<strong>疫苗开发、抗体设计</strong>和<strong>蛋白质药物</strong>领域。例如，他们的团队设计了特异性结合流感病毒的蛋白质，这些蛋白质可以作为抗流感药物或疫苗的基础。同时，他们还设计了能够与癌细胞特异性标志物结合的蛋白质，这些蛋白质可能成为未来癌症免疫疗法的新武器。</p><p><strong>总结</strong></p><p>David Baker教授通过计算蛋白质设计在<strong>基础科学</strong>和<strong>实际应用</strong>之间架起了一座桥梁。他的团队通过开发和应用如Rosetta这样的工具，开创了从头设计新蛋白质的时代，极大地扩展了我们对蛋白质折叠、结构与功能的理解。这些工作不仅推动了蛋白质设计和生物工程的发展，还为药物开发、疾病治疗以及合成生物学等领域带来了革命性的进展。</p><h2 id="Demis-Hassabis和John-M-Jumper"><a href="#Demis-Hassabis和John-M-Jumper" class="headerlink" title="Demis Hassabis和John M. Jumper"></a>Demis Hassabis和John M. Jumper</h2><p><strong>Demis Hassabis</strong>和<strong>John M. Jumper</strong>是引领<strong>AlphaFold</strong>开发的核心人物，AlphaFold是Google DeepMind团队开发的一个革命性工具，极大地推动了蛋白质结构预测领域的发展，尤其是在精准预测蛋白质的三维结构方面取得了前所未有的突破。</p><p>以下是他们在蛋白质结构预测方面的工作重点：</p><p><strong>1. AlphaFold的背景与目标</strong></p><p>蛋白质的三维结构对于理解其生物功能至关重要，然而，实验手段（如X射线晶体学、核磁共振NMR等）来解析蛋白质结构往往耗时且昂贵。几十年来，研究人员一直尝试通过计算方法来预测蛋白质结构，但面临着复杂的“蛋白质折叠问题”：即如何从氨基酸序列预测出蛋白质的三维结构。虽然已有一些进展，但要达到与实验方法相当的精度仍十分困难。</p><p>为了解决这一难题，<strong>Demis Hassabis</strong>（作为DeepMind的创始人之一）和<strong>John M. Jumper</strong>（作为项目负责人）领导了AlphaFold的开发，目标是利用<strong>深度学习</strong>和<strong>人工智能</strong>，从蛋白质的氨基酸序列直接预测出其三维结构。</p><p><strong>2. AlphaFold的创新点</strong></p><p>AlphaFold的成功离不开多种技术的结合和创新，尤其是深度学习算法和蛋白质结构生物学知识的深度融合。其核心创新包括：</p><p><strong>a. 进化信息与多序列比对（MSA）</strong></p><p>AlphaFold通过整合进化信息和多序列比对（MSA），推断蛋白质中氨基酸之间的远程相互作用。进化信息帮助AlphaFold理解哪些残基在蛋白质折叠过程中可能会形成接触。通过分析与目标蛋白质同源的蛋白质序列，AlphaFold能够提取出进化过程中保守的模式，从而捕捉到结构上的约束。</p><p><strong>b. 图卷积网络（Graph Neural Network, GNN）</strong></p><p>AlphaFold利用<strong>图卷积网络</strong>来处理蛋白质结构中的几何关系。蛋白质分子中的原子和氨基酸可以被看作一个图，AlphaFold通过图卷积网络学习和预测残基之间的距离和角度，从而有效地构建出三维结构模型。</p><p><strong>c. 注意力机制（Attention Mechanism）</strong></p><p>AlphaFold采用了一种基于<strong>注意力机制</strong>的模型架构，允许其在预测过程中聚焦于蛋白质序列中的关键位置，以有效捕捉和理解序列之间的复杂相互作用。这与NLP领域的Transformer架构有相似之处。</p><p><strong>d. 结构预测与精细化</strong></p><p>AlphaFold不仅可以准确地预测蛋白质的主链折叠（骨架结构），还能对侧链的位置进行精细化调整，生成高精度的全原子结构。这种多阶段的精细化过程极大地提升了最终预测结果的分辨率。</p><p><strong>3. AlphaFold的突破性成果</strong></p><p>AlphaFold在2020年<strong>CASP14（Critical Assessment of Protein Structure Prediction）</strong>竞赛中表现卓越，取得了前所未有的高分，展现出了近乎与实验结构解析技术相媲美的预测精度。AlphaFold预测的蛋白质结构在很多情况下与实验解析的结构几乎完全一致。</p><p><strong>a. 预测精度的提升</strong></p><p>AlphaFold显著提升了复杂蛋白质结构的预测精度，尤其是对于那些通过传统方法难以预测的结构。它在CASP14中的成功标志着计算蛋白质结构预测领域的一个里程碑式突破，平均误差仅为1-2 Å（埃），已经接近实验误差范围。</p><p><strong>b. 广泛的蛋白质种类</strong></p><p>AlphaFold可以预测各种不同类型的蛋白质结构，包括那些之前一直难以预测的跨膜蛋白和较大的多亚基蛋白质复合物。这使得其应用领域极为广泛。</p><p><strong>c. 科学社区的响应</strong></p><p>AlphaFold的成功引起了全球科学界的极大关注，认为这项技术有望大规模加速基础生物学研究、药物开发、合成生物学等多个领域。许多之前结构未解的蛋白质可以通过AlphaFold快速得到高质量预测，推动了包括人类蛋白质组在内的多个重要研究方向。</p><p><strong>4. AlphaFold2的技术细节</strong></p><p>2021年，DeepMind发布了<strong>AlphaFold2</strong>，并在《Nature》上发表了相关论文（以John M. Jumper为第一作者）。AlphaFold2较其前身在算法和性能上有了显著改进：</p><p><strong>a. 结合序列和结构信息</strong></p><p>AlphaFold2将序列比对和结构预测过程整合在一起，通过反复迭代优化预测的3D结构，并结合进化信息不断调整模型。其框架能够自适应地处理来自进化、几何约束以及物理原理的多种输入信息。</p><p><strong>b. 基于物理约束的损失函数</strong></p><p>AlphaFold2还引入了一种基于物理和几何约束的损失函数，能够更好地惩罚不合理的几何结构，并鼓励模型生成物理上可能的折叠结构。这使得预测结构在精度和物理合理性上都有了大幅度提升。</p><p><strong>c. 开源与全球影响</strong></p><p>2021年7月，DeepMind团队将AlphaFold的代码和大量蛋白质结构数据<strong>开源</strong>，极大地推动了全球科学界对蛋白质结构的研究和利用。研究人员可以免费使用AlphaFold2来预测蛋白质结构，很多难解的蛋白质在短时间内得到了可靠的结构预测，进一步促进了科学发现。</p><p><strong>5. 应用与影响</strong></p><p>AlphaFold的影响已经超出了计算生物学领域，广泛应用于<strong>药物研发、合成生物学、结构生物学、基因组学</strong>等多个学科。以下是一些具体的应用领域：</p><p><strong>a. 基础研究</strong></p><p>AlphaFold帮助解决了许多在实验上难以解析的蛋白质结构问题。例如，AlphaFold预测了一些与人类疾病相关但之前未解析的蛋白质结构，极大地加速了对这些疾病分子机制的理解。</p><p><strong>b. 药物开发</strong></p><p>药物设计往往需要知道靶标蛋白的三维结构，以确定潜在的结合位点。AlphaFold的预测帮助制药公司在早期筛选中加快了靶标识别和药物分子的设计过程。</p><p><strong>c. 合成生物学</strong></p><p>在合成生物学中，设计全新蛋白质用于特定任务（例如催化反应或感应特定分子）需要详细了解蛋白质的结构。AlphaFold为这一领域提供了强大的工具，能够设计出稳定且功能明确的蛋白质。</p><p><strong>d. 疾病研究</strong></p><p>AlphaFold预测了许多重要的疾病相关蛋白质的结构，特别是那些与神经退行性疾病、癌症和遗传病相关的蛋白质，帮助科学家理解这些疾病的分子基础，并推动治疗策略的开发。</p><p><strong>6. 未来展望</strong></p><p>尽管AlphaFold已经取得了巨大的成功，但蛋白质结构预测领域依然有许多未解的难题。例如，如何更好地预测蛋白质复合物和大分子机器的动态结构、如何预测蛋白质与其他分子的相互作用等问题仍需进一步研究。随着AlphaFold和类似技术的不断发展，未来可能会看到更加广泛的应用，并最终改变生命科学研究的面貌。</p><p><strong>总结</strong></p><p><strong>Demis Hassabis</strong>和<strong>John M. Jumper</strong>通过领导AlphaFold项目，解决了蛋白质结构预测领域长期以来的难题，取得了划时代的突破。他们的工作不仅证明了人工智能在生物学中的强大潜力，还为药物开发、基础研究和生物技术提供了新的可能性。</p>]]></content>
      
      
      <categories>
          
          <category> 知识卡片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识卡片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh配置以及用法总结</title>
      <link href="/posts/20240930130049.html"/>
      <url>/posts/20240930130049.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>大部分人对 SSH 只会基本的 ssh user@ip 的方式登录服务器，至多再会个配置免密，而对 SSH config 几乎不了解。事实上 SSH 可以灵活批量配置服务器信息，配置跳板等等。</p><p>本文介绍一些使用 ssh 使用的细节，相对详细的学习记录一下 SSH config文件的配置。</p><h2 id="2-公钥私钥"><a href="#2-公钥私钥" class="headerlink" title="2. 公钥私钥"></a>2. 公钥私钥</h2><p>注意公钥私钥的文件权限，分权限错误会无法登陆</p><h2 id="3-ssh-config文件"><a href="#3-ssh-config文件" class="headerlink" title="3. ssh_config文件"></a>3. ssh_config文件</h2><p>SSH config 作用就是可以把 SSH 相关的信息都记录到一个配置文件，可以简化操作、节约时间。</p><p>SSH config 有一个系统级的，一个用户级的。一般普通用户只关注用户级的。文件路径为 <code>~/.ssh/config</code> 。</p><h3 id="3-1-基本写法"><a href="#3-1-基本写法" class="headerlink" title="3.1. 基本写法"></a>3.1. 基本写法</h3><p>一个服务器写一段配置。</p><pre class="line-numbers language-none"><code class="language-none">Host Server1 Hostname 172.16.0.1 User zhangsan Port 22 ServerAliveInterval 180 IdentityFile ~&#x2F;.ssh&#x2F;secret_key.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段的含义为有一个服务器：</p><ol><li>我们为它起了个名字叫 Server1</li><li>它的 IP 是 172.16.0.1（也可以填 Hostname）</li><li>我在上面的用户名是 zhangsan</li><li>SSH 服务监听端口号为 22（即默认值，也可以不写这一行）</li><li>ServerAliveInterval 180 表示在建立连接后，每 180 秒客户端会向服务器发送一个心跳，避免用户长时间没操作连接中断</li><li>最后一行表示使用一个专用的密钥，如果没有专用的密钥则删除该行即可。</li><li>配置完成之后直接使用<code>ssh Server1</code>即可登录服务器</li></ol><h3 id="3-2-拷贝文件"><a href="#3-2-拷贝文件" class="headerlink" title="3.2. 拷贝文件"></a>3.2. 拷贝文件</h3><p>拷贝文件（反过来就是从服务器往本地下载文件）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">scp</span> /path/to/local/file Server1:/path/to/remote/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置免密也相同，输入以下命令并输入密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-copy-id Server1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-基本使用"><a href="#3-3-基本使用" class="headerlink" title="3.3. 基本使用"></a>3.3. 基本使用</h3><p>通过上面的配置就可以做到十分方便的管理本地的 ssh 秘钥，与不同的服务器进行免密登录。</p><ol><li><p>在本地生成多个 ssh-key<br> <code>ssh-keygen -t rsa -C &#39;example@mail.com&#39; -f ~/.ssh/github_id_rsa</code><br> <code>ssh-keygen -t rsa -C &#39;example@mail.com&#39; -f ~/.ssh/gitee_id_rsa</code><br> <code>ssh-keygen -t rsa -C &#39;example@mail.com&#39; -f ~/.ssh/anlab_id_rsa</code><br> 如上, 我们生成了三个不同的 ssh-key.在 home 路径下会出现对应的密钥和公钥文件. 如 <code>anlab_id_rsa</code> 和 <code>anlab_id_rsa.pub</code><br> 创建 ssh-key 的命令中, 参数的含义如下: <code>-t</code> 设置 key 的类型,一般有 <code>rsa</code> 和 <code>dsa</code> 两种, 选择 <code>rsa</code> 即可. <code>-C</code> 设置注释文字,比如邮箱. <code>-f</code> 指定文件名</p></li><li><p>创建 <code>config</code> 文件<br> 在 <code>.ssh</code> 文件夹创建名为 <code>config</code> 的文件, 指定不同用户对应的 ssh-key</p> <pre class="line-numbers language-config" data-language="config"><code class="language-config"># anlabHost server-labHostName 10.20.109.198 可以不输入name,只要ip地址对即可PreferredAuthentications publickeyIdentityFile ~&#x2F;.ssh&#x2F;anlab_id_rsa# githubHost githubHostName github.comPreferredAuthentications publickeyIdentityFile ~&#x2F;.ssh&#x2F;github_id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将不同的公钥, 配置到对应账户的服务端即可</p></li></ol><h3 id="3-4-通配符方法"><a href="#3-4-通配符方法" class="headerlink" title="3.4. 通配符方法"></a>3.4. 通配符方法</h3><p>如果有一批服务器都是相同的配置，更是可以用通配符统一处理：</p><pre class="line-numbers language-none"><code class="language-none">Host Server*    User zhangsan    Port 22    ServerAliveInterval 180Host Server1    Hostname 172.16.0.1Host Server2    Hostname 172.16.0.2Host Server3    Hostname 172.16.0.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-多个配置文件管理"><a href="#3-5-多个配置文件管理" class="headerlink" title="3.5. 多个配置文件管理"></a>3.5. 多个配置文件管理</h3><p>如果需要管理非常多的服务器，全写到一个文件里会很乱很难维护，也不方便共享。事实上，<code>~/.ssh/config</code> 中支持引用其它文件。我一般习惯新建一个这样的配置 <code>~/.ssh/config-cluster-shanghai </code>，在其中编写类似上文的内容。然后在 <code>~/.ssh/config</code>  的开头加入如下一行即可：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Include config-cluster-shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>事实上这里也可以用通配符，比如：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Include config-*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样 <code>~/.ssh/</code> 目录下的所有 <code>config-</code> 开头的文件都会被引用到。</p><h3 id="3-6-跳板机"><a href="#3-6-跳板机" class="headerlink" title="3.6. 跳板机"></a>3.6. 跳板机</h3><p>很多集群需要跳板机才可登录，我们需要先登录跳板机，再从跳板机登录内部机器。这会引入两个麻烦，一是登录要两次，如果配置 SSH config 还需要在跳板机也配置一份儿；二是拷贝文件十分麻烦，要拷贝两次。</p><pre class="line-numbers language-none"><code class="language-none">Host Jumper    Hostname 1.2.3.4    User zhangsanHost Server*    User zhangsan    ProxyJump Jumper    ServerAliveInterval 180Host Server1    Hostname 172.16.0.1Host Server2    Hostname 172.16.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一段为跳板机的登录方式，第二段中新增了一个 ProxyJump 字段，表示所有 Server 开头的服务器，在登录的时候都要从 Jumper 这个服务器跳转一下。这时候我们想登录 172.16.0.1，只需要直接输入：</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">$ ssh Server1$ scp &#x2F;path&#x2F;to&#x2F;local&#x2F;file Server1:&#x2F;path&#x2F;to&#x2F;remote&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意一个细节是，这种配置下我们是直接从本地登录内部服务器，所以在配置免密时，是需要把本地的公钥放到内部服务器的。</p><h2 id="4-SCP-服务器间拷贝文件"><a href="#4-SCP-服务器间拷贝文件" class="headerlink" title="4. SCP 服务器间拷贝文件"></a>4. SCP 服务器间拷贝文件</h2><p>如果想在两台服务器之间拷贝文件，可以在本地执行 scp ：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">$ scp Server1:/path/to/file Server2:/path/to/file2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令要求 Server1 可以直接访问 Server2。如果不满足这个条件，可以用本机转发，只需要增加一个参数 <code>-3</code> 表示用本地机器当转发机：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">$ scp -3 Server1:/path/to/file Server2:/path/to/file2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IC后端-TSMC22后端常见问题总结</title>
      <link href="/posts/20240812181447.html"/>
      <url>/posts/20240812181447.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Power-Metal浮空"><a href="#1-Power-Metal浮空" class="headerlink" title="1. Power Metal浮空"></a>1. Power Metal浮空</h2><blockquote><p>解决方案提供者：dpc</p></blockquote><p>在Init的时候需要使用以下三个命令check：</p><ul><li>check_pg_connectivity</li><li>check_pg_drc</li><li>check_pg_missing_vias</li></ul><p>如果出现以下情况，说明Power Metal浮空，原因是没有和低层的power metal连接 比如这个M6没有和下层的M5进行连接：</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121816180.png"></p><p>解决方案：</p><ol><li>SRAM隔开一点</li><li>把floating的metal给去掉 把旁边SRAM的VDD和VSS拉升过去</li></ol><h2 id="2-Calibra检查出现VIA的error"><a href="#2-Calibra检查出现VIA的error" class="headerlink" title="2. Calibra检查出现VIA的error"></a>2. Calibra检查出现VIA的error</h2><blockquote><p>解决方案提供者：dpc</p></blockquote><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121817945.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121817219.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121817219.png"><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121817285.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121817642.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121819903.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121818663.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121819662.png"></p><h2 id="3-SRAM时序问题之地址信号驱动不足"><a href="#3-SRAM时序问题之地址信号驱动不足" class="headerlink" title="3. SRAM时序问题之地址信号驱动不足"></a>3. SRAM时序问题之地址信号驱动不足</h2><h3 id="3-1-问题概述"><a href="#3-1-问题概述" class="headerlink" title="3.1. 问题概述"></a>3.1. 问题概述</h3><p>同一个地址控制输入给多个SRAM时，时序报错，无法自动优化</p><h3 id="3-2-问题原因"><a href="#3-2-问题原因" class="headerlink" title="3.2. 问题原因"></a>3.2. 问题原因</h3><p>地址位给多个RAM时，fanout过大，且地址位寄存器向SRAM的输入连线过长。优化工具优化过程中时候优化了驱动能力，但是对时序优化不明显，最后形成了无法优化的死局。</p><h3 id="3-3-解决方案"><a href="#3-3-解决方案" class="headerlink" title="3.3. 解决方案"></a>3.3. 解决方案</h3><p>回到代码层面，修改代码</p><p>虽然SRAM的读写地址一致，但是可以在Verilog中重复并行构建一样的读写地址生成电路，由这些电路分别单独控制SRAM，以此优化路径和fanout问题。</p><h3 id="3-4-具体分析及测试"><a href="#3-4-具体分析及测试" class="headerlink" title="3.4. 具体分析及测试"></a>3.4. 具体分析及测试</h3><p>待补全，个人认为与SRAM需要读写的的数据总位宽相关，可以测试一下.</p><h2 id="4-RF2P时序极差问题"><a href="#4-RF2P时序极差问题" class="headerlink" title="4. RF2P时序极差问题"></a>4. RF2P时序极差问题</h2><h3 id="4-1-问题概述"><a href="#4-1-问题概述" class="headerlink" title="4.1. 问题概述"></a>4.1. 问题概述</h3><p>DC过后，发现RF2P的时序极差，单过SRAM的setup time都超过4nm，时序不过</p><h3 id="4-2-问题原因"><a href="#4-2-问题原因" class="headerlink" title="4.2. 问题原因"></a>4.2. 问题原因</h3><p>TSMC22nm ARM的sram中，存在端口EMA（EMAB、EMAA），该端口可调，范围是000到111，其会限制时序。具体的实际作用其实是为保证在工艺出问题时能够降低频率正常运行，但是限制的低频率对我们DC造成了影响。</p><blockquote><p>EMA lets you add delays to internal memory timing to improve the manufacturing yield of a memory instance. These delays allow extra time for successful memory read and write operations by slowing down the memory access.</p></blockquote><h3 id="4-3-解决方案"><a href="#4-3-解决方案" class="headerlink" title="4.3. 解决方案"></a>4.3. 解决方案</h3><p>在DC的sdc文件里给EMA相关端口增加约束，让其按照最佳的时序进行综合，如：</p><p><code>set_logic_zero &#123;EMAA[0] EMAA[1] EMAA[2] EMAB[0] EMAB[1] EMAB[2]&#125;</code></p><p>注意，这里是给top的io加约束，要搞清楚是哪条线连接到了SRAM的EMA端口。如果EMA是内部生成给SRAM互联的，还没有找到合适的处理方法，可以吧EMA直接设置为3’b000.</p><h2 id="5-PT过程无法找到SDC指定的Library-Cell的问题"><a href="#5-PT过程无法找到SDC指定的Library-Cell的问题" class="headerlink" title="5. PT过程无法找到SDC指定的Library Cell的问题"></a>5. PT过程无法找到SDC指定的Library Cell的问题</h2><h3 id="5-1-问题描述"><a href="#5-1-问题描述" class="headerlink" title="5.1. 问题描述"></a>5.1. 问题描述</h3><ul><li>PT遇到该Error：<br><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121820366.png"></li></ul><h3 id="5-2-解决方案"><a href="#5-2-解决方案" class="headerlink" title="5.2. 解决方案"></a>5.2. 解决方案</h3><ul><li><p>把Driving Cell的指定Library的部分缺省，软件自己匹配<br>修改前：<br><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121820199.png"></p><p>修改后：</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121820091.png"></p></li></ul><h2 id="6-PT时序极差问题之线太长-通孔太多"><a href="#6-PT时序极差问题之线太长-通孔太多" class="headerlink" title="6. PT时序极差问题之线太长&#x2F;通孔太多"></a>6. PT时序极差问题之线太长&#x2F;通孔太多</h2><h3 id="6-1-问题描述"><a href="#6-1-问题描述" class="headerlink" title="6.1. 问题描述"></a>6.1. 问题描述</h3><ul><li>查看PT时序报告发现，STD cell或者SRAM之间连线过多，时序过差</li></ul><h3 id="6-2-问题原因"><a href="#6-2-问题原因" class="headerlink" title="6.2. 问题原因"></a>6.2. 问题原因</h3><ul><li>很有可能是SRAM的IO与需要链接的部分存在隔绝，主要是因为PR过程中SRAM拜访位置不合理</li></ul><h3 id="6-3-解决方案"><a href="#6-3-解决方案" class="headerlink" title="6.3. 解决方案"></a>6.3. 解决方案</h3><ul><li>回到PR，根据数据流向优化布局。</li></ul><h2 id="7-Calibre报错：No-such-file-or-directory"><a href="#7-Calibre报错：No-such-file-or-directory" class="headerlink" title="7. Calibre报错：No such file or directory"></a>7. Calibre报错：No such file or directory</h2><h3 id="7-1-问题描述"><a href="#7-1-问题描述" class="headerlink" title="7.1. 问题描述"></a>7.1. 问题描述</h3><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121821800.png"></p><h3 id="7-2-问题原因"><a href="#7-2-问题原因" class="headerlink" title="7.2. 问题原因"></a>7.2. 问题原因</h3><p>这个问题的原因是命令行启动calibredrv，无法生成其工作路径。</p><h3 id="7-3-解决方案"><a href="#7-3-解决方案" class="headerlink" title="7.3. 解决方案"></a>7.3. 解决方案</h3><p>解决方法: 在terminal里面输入 calibredrv， 打开软件GUI， 然后退出。 再次运行脚本就好了</p>]]></content>
      
      
      <categories>
          
          <category> 芯片设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IC后端-pnr全流程</title>
      <link href="/posts/20240812175825.html"/>
      <url>/posts/20240812175825.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-课题组项目统一文件结构"><a href="#1-课题组项目统一文件结构" class="headerlink" title="1. 课题组项目统一文件结构"></a>1. 课题组项目统一文件结构</h2><blockquote><p>请注意三个路径 <code>MY_LIB_DIR</code>, <code>MY_PROJ_DIR</code>以及<code>BACKEND_DIR</code><br>这三个路径在脚本中会经常用到的。</p></blockquote><pre class="line-numbers language-mindmap" data-language="mindmap"><div class="caption"><span>> 500</span></div><code class="language-mindmap">## 后端环境- TSMC22lib(脚本库端)&#96;MY_LIB_DIR&#96;- Makefile- technology- settings- Makefile_globalsettings- template_localsettings- template_project_settings- synthesis- pnr- starrc- pt_flow- etc.- 项目文件夹(项目端)&#96;MY_PROJ_DIR&#96;- Makefile- rtl- simv- spyglass- BACKEND.&#96;BACKEND_DIR&#96;- Makefile_localsettings- synthesis- pnr- starrc- pt_flow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-流程初始化"><a href="#2-流程初始化" class="headerlink" title="2. 流程初始化"></a>2. 流程初始化</h2><ol><li>从<code>LIB_DIR</code>路径下复制一份<code>Makefile</code>，到项目文件夹<code>MY_PROJ_DIR</code>路径下（即自己的项目根路径）。</li><li>执行<code>make NAME=YourDesignName all</code>. 例如,我的项目顶层叫做ISP，那就是<code>make NAME=ISP all</code></li><li>第二步会在当前路径下生成<code>BACKEND</code>文件夹，里面包含了<code>synthesis</code>，<code>pnr</code>，<code>starrc</code>，<code>pt_flow</code>等文件夹，各个步骤的脚本均已经初始化完成。</li></ol><h2 id="3-整体流程介绍"><a href="#3-整体流程介绍" class="headerlink" title="3.  整体流程介绍"></a>3.  整体流程介绍</h2><p>初始化完成之后， 我们将目光放在<code>pnr</code>这里。  （做pr需要提前准备好综合的网表和sdc约束文件，请参考dc综合部分.下文<code>数据准备</code>部分有详细介绍）</p><p>进入<code>pnr</code>路径之后，里面会有一个<code>run_pr</code>文本文件，打开之后如下图所示，包含了在做pnr的过程中各个步骤，可以自己修改需要跑哪一部分（注释或者取消注释即可）</p><blockquote><p>最后3个带open的命令，就是字面意思，打开对应的block。 比如说我们做完了place_opt之后，想打开结果查看一下，就可以执行open_palce_opt命令</p></blockquote><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121801339.png"></p><p>下图简单展示一下流程的具体情况。</p><ol><li><code>init_design</code> 是进行 floorplan的， 需要手动摆放macro以及pin， 同时设置电源条线。</li><li><code>place_opt</code> -&gt; <code>route_opt</code> 主要是跑脚本， 一般没问题的话，就直接一起跑就好了</li><li><code>route</code>完了之后，要进行 <code>timing_eco</code>。 通过 <code>starrc</code> 和 <code>pt</code>修复时序。 这一步需要重复执行直到没有时序错误为止。</li><li>然后就可以插入 filler， 保存为<code>chip_finish</code></li><li>通过<code>write_data</code>,可以导出所有后续需要的文件.</li><li>然后就可以calibre里面进行<code>lvs</code>和<code>drc</code>检查了。<br><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121806964.png"></li></ol><h2 id="4-数据准备"><a href="#4-数据准备" class="headerlink" title="4. 数据准备"></a>4. 数据准备</h2><h3 id="Makefile-localsettings"><a href="#Makefile-localsettings" class="headerlink" title="Makefile_localsettings"></a>Makefile_localsettings</h3><p>在进行pr之前， 我们需要提前设置好使用的IP以及SRAM的相关信息，在<code>BACKEND_DIR</code>里面会有<code>Makefile_localsettings</code></p><p>pr需要设置<code>ndm_list</code>,将使用到的ndm添加即可</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121806121.png"></p><h3 id="netlist"><a href="#netlist" class="headerlink" title="netlist"></a>netlist</h3><p>综合生成的网表文件, 保存在<code>synthesis/outputs</code>即可,无需移动.</p><h3 id="sdc"><a href="#sdc" class="headerlink" title="sdc"></a>sdc</h3><blockquote><p><code>synthesis</code>使用的<code>sdc</code>文件放在<code>synthesis/inputs</code>文件夹内.<br><code>synthesis</code>之后的步骤(pr,pt)使用的<code>sdc</code>文件是dc工具生成的sdc,放在<code>synthesis/outputs</code>内.<br>脚本中已经设置了对应的路径, 不要轻易移动,检查确认即可.</p></blockquote><p>synthesis使用的sdc和之后步骤使用的sdc有所不同,需要手动进行修改:</p><ol><li>在<code>synthesis</code>的时候,我们的sdc会设置<code>ideal_network</code>以及<code>uncertainty</code>等.<br>在pr以及pt的时候,已经有具体的物理版图信息了,就不需要这个设置了,需要修改sdc将其注释掉.</li><li>设置<code>driving_cell</code>的时候, synthesis是这样设置的<br><code>set_driving_cell -library tcbn22ullbwp30p140ssg0p81vm40c -lib_cell INVD4BWP30P140 -pin ZN [get_ports *]</code><br>PT时因为是多个corner同时进行STA,因此不需要指定<code>library</code>选项,改为<br><code>set_driving_cell -lib_cell INVD4BWP30P140  [get_ports *]</code>即可</li></ol><h2 id="5-init-design"><a href="#5-init-design" class="headerlink" title="5. init_design"></a>5. init_design</h2><p>将<code>run_pr</code>的内容,除了第一行全部注释, 然后在命令行执行<code>./run_pr</code>, 进行<code>init_deisgn</code>.</p><blockquote><p>执行完该步骤，会在pnr的路径下，生成<code>project_settings</code>文件,里面包含了pr所用到的一些工艺文件,感兴趣的可以了解一下.</p></blockquote><h3 id="进行floorplan"><a href="#进行floorplan" class="headerlink" title="进行floorplan"></a>进行floorplan</h3><p>脚本执行完毕后, 会自动打开icc2的gui界面. 这时需要进行floorplan,包含以下几个步骤:</p><ol><li>初始化core的面积<br>脚本默认会获取设计的面积, 按照30%填充率进行初始化,一般需要设计者重新声明一下,按照自己项目的需求进行初始化.<code>initialize_floorplan</code></li><li>sram等macro的摆放.<br>需要按照数据流向来摆放,否则后面布线可能会很阻塞.摆放完成需要<code>fix</code>住.<br>要善用<code>flyline</code>以及<code>register_trace</code>功能,时刻检查数据流向</li><li>摆放pin<br>命令为<code>create_pin_guide</code>。 示例如下：</li></ol><pre class="line-numbers language-none"><code class="language-none">create_pin_guide -boundary &#123;&#123;x1 y1&#125; &#123;x2 y2&#125;&#125; -layers &#123;M3 M5&#125; -name pin_guide_0 [get_ports *]place_pins -ports [get_ports *]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果摆错了，需要删除<code>pin_guide</code>，重新<code>place_pins</code>即可.</p><p><code>Remove_pin_guides *</code></p><ol start="4"><li>设置 <code>placement_blockage</code> (可选)<br>具体的设置方法在<code>place_opt</code>部分说明</li><li>使用脚本产生电源条线<br><code>source ./user_scripts/floorplan.tcl</code></li><li>保存设计,必须保存为这样的名字,以便下一步脚本读取.<br><code>design_name/init_design</code></li></ol><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>做完<code>floorplan</code>之后，需要执行下列的命令进行检查。</p><p>执行完命令之后 <code>view-&gt;error browser </code>查看具体的错误信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">check_boundary_cellscheck_pg_missing_viascheck_pg_drccheck_pg_connectivity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>总共需要检查以下几项内容:</p><ol><li><code>core height</code> 是否为 0.9 整数倍</li><li><code>ports</code> 是否已放置</li><li>ram 放置是否符合数据流向，是否放在 core 区域<strong>边缘内</strong>并 <code>fix 住</code><br>（如果 block 超过 1200x1200，有无放置 clamp cell 及 tcd cell 并创建其 keepout margin 及 routing blockage）</li><li>有无 <code>source ./user_scripts/floorplan.tcl</code> 创建 boundary cell、tap cell 及电源线</li><li>View-&gt;Error Browser-&gt;<code>block_name_chf.err</code> 查看 boundary cell、tap cell 是否放置有误<br> tap cell 是否延伸到第一行及最后一行</li></ol><p>&#x3D;&#x3D;以上检查完成没有问题后，是否 save design as design_name&#x2F;init_design&#x3D;&#x3D;</p><h2 id="6-place"><a href="#6-place" class="headerlink" title="6. place"></a>6. place</h2><blockquote><p>一般在place阶段停一下，跑完之后查看一下 cell 的排布情况，查看总体的density。<br>如果总体或者某些局部的density没有按照自己的设定 place， 就需要重新来place。<br>如果已经好几个版本了，floorplan的设置以及blockage都已经设置好了，对于整体的placement十分了解，则可以从place直接跑到route_opt</p></blockquote><p>通过设置<code>placement_blockage</code>来自由的设置不同区域的密度，防止某些区域密度过大或布线资源紧张。</p><p>可以设置partial placement blockage后再运行一次<code>place_opt</code>命令</p><p>在gui界面Create-&gt;Placement Blockage</p><p>Type选择partial，根据需求设置Blocked percentage，然后在相应区域拖出一个矩形</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121807356.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121807690.png"></p><h2 id="7-place-route-opt"><a href="#7-place-route-opt" class="headerlink" title="7. place -&gt; route_opt"></a>7. place -&gt; route_opt</h2><p><code>route_opt</code>完了之后, 首先检查一下<code>route_congestion</code>.</p><h2 id="8-route-opt之后，查看ERROR-修复"><a href="#8-route-opt之后，查看ERROR-修复" class="headerlink" title="8. route_opt之后，查看ERROR &amp; 修复"></a>8. route_opt之后，查看ERROR &amp; 修复</h2><h3 id="查看错误报告"><a href="#查看错误报告" class="headerlink" title="查看错误报告"></a>查看错误报告</h3><p><code>route_opt</code>完成之后, 可以使用run_pr脚本中的<code>open_route_opt</code>命令打开<code>route_opt</code>的block并在GUI中查看。</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121807366.png"></p><p>使用命令检查，并生成报告</p><pre class="line-numbers language-none"><code class="language-none">check_routes     # 会生成zroute.error文件，记录了布线的错误（不包含open的错误）check_lvs          # 生成 设计名_lvs.error 文件， 报告lvs错误 (包含了open的错误)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&#x3D;&#x3D;打开Error browser查看错误报告&#x3D;&#x3D;</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121808225.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121809537.png"></p><h3 id="修复错误"><a href="#修复错误" class="headerlink" title="修复错误"></a>修复错误</h3><ol><li>修复drc和短路错误</li></ol><pre class="line-numbers language-none"><code class="language-none">#fix drc &amp; short netsforeach a [get_attribute [get_drc_errors -error_data [get_drc_error_data zroute.err] -filter &quot;layers.name &#x3D;~ *&quot;] error_id] &#123;foreach_in_collection net [get_attribute [get_drc_errors -error_data [get_drc_error_data zroute.err] $a] objects] &#123;if &#123;[get_attr [get_nets $net] net_type] &#x3D;&#x3D; &quot;signal&quot; &amp;&amp; [get_shapes -of_objects [get_nets $net]] !&#x3D; &quot;&quot;&#125; &#123;remove_shapes [get_shapes -of_objects [get_nets $net]]remove_vias [get_vias -of_objects [get_nets $net]]&#125;&#125;&#125;route_detail -incremental true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>修复lvs和open错误<br>注意把<code>RAM_test</code>修改为自己设计的design_name</li></ol><pre class="line-numbers language-none"><code class="language-none">#fix lvs open netsset no_pwr_net &quot;&quot;foreach a [get_attribute [get_drc_errors -error_data [get_drc_error_data RAM_test_lvs.err] ] error_id] &#123;foreach_in_collection net [get_attribute [get_drc_errors -error_data [get_drc_error_data RAM_test_lvs.err] $a] objects] &#123;if &#123;[get_attr [get_nets $net] net_type] &#x3D;&#x3D; &quot;signal&quot;&#125; &#123;set no_pwr_net [add_to_collection $net $no_pwr_net]&#125;&#125;&#125;route_eco -nets [get_nets $no_pwr_net]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-timing-eco"><a href="#9-timing-eco" class="headerlink" title="9. timing_eco"></a>9. timing_eco</h2><blockquote><p>如上面流程图所示, route_opt 完了之后, 需要进行时序修复 timing_eco, 并且可能需要反复进行了修复时序.</p></blockquote><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li>切记,是在跑完了<code>route_opt</code>之后进行的.</li><li>进入<code>BACKEND_DIR/starrc</code>文件夹, <code>make starrc</code>进行寄生参数抽取.</li><li>然后进入<code>BACKEND_DIR/pt_flow</code>文件夹,<code>make pt</code>进行pt检查时序.<ul><li>pt过程中会使用到<code>sdc</code>文件是dc生成的标准语法的<code>sdc</code>文件.</li></ul></li><li>跑完一轮之后,建议在<code>starrc</code>和<code>pt</code>文件夹,执行<code>make backup</code>进行数据备份,以进行不同迭代次数的对比</li></ol><p><code>timing_eco</code>是从ICC2的block中直接读取数据的,在<code>Makefile_localsetting</code>里面,有设置用来控制pt从icc2的哪个BLOCK中读取数据,并生成<code>eco_changes.tcl</code>,同时设置做完<code>timing_eco</code>之后,保存为新的BLOCK的名字.</p><p>多次做<code>timing_eco</code>的步骤,<strong>每次</strong>需要修改<code>Makefile_localsetting</code>的设置,确保是在上一步eco的基础上进行的修改.</p><p>例如第一遍pt,两个设置分别是<code>route_opt</code>和<code>timing_eco</code>. 在做第二遍的时候,需要改为<code>timing_eco</code>和<code>timing_eco_1</code>,<strong>然后再进行<code>starrc</code>以及<code>pt</code></strong>.以此类推.</p><p>&#x3D;&#x3D;每次timing_eco之后都建议做一遍第8部分所展示的流程，检查ERROR&#x3D;&#x3D;</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121809408.png"></p><h2 id="10-chip-finish-导出文件前设置"><a href="#10-chip-finish-导出文件前设置" class="headerlink" title="10. chip_finish :导出文件前设置"></a>10. chip_finish :导出文件前设置</h2><p><code>timing_eco</code>做完之后，可以准备导出文件了，需要进行一些设置。</p><p>通过GUI打开<code>timing_eco</code>完成的BLOCK。</p><blockquote><p>i ✘ 错误做法: 直接在terminal里面输入 icc2_shell -gui, 然后打开block. 这样会没有脚本中的变量以及 ref_libs 的路径<br>✔ 正确做法: 使用<code>run_pr</code>脚本里面的任意一个<code>open</code>命令, 比如<code>open_route_opt</code>， 会自动加载脚本变量并且打开GUI，然后手动在GUI中打开对应的block即可。</p></blockquote><h3 id="添加-filler"><a href="#添加-filler" class="headerlink" title="添加 filler"></a>添加 filler</h3><pre class="line-numbers language-none"><code class="language-none">#add filler cellsset_app_options  -name place.legalize.enable_advanced_legalizer  -value  falseset CHIP_FINISH_NON_METAL_FILLER_LIB_CELL_LIST  &quot; FILL64BWP30P140 FILL32BWP30P140 FILL16BWP30P140 FILL8BWP30P140 FILL4BWP30P140 FILL3BWP30P140 FILL2BWP30P140&quot;set create_stdcell_filler_non_metal_lib_cell_sorted [get_object_name [sort_collection -descending [get_lib_cells $CHIP_FINISH_NON_METAL_FILLER_LIB_CELL_LIST] area]]set create_stdcell_filler_non_metal_cmd &quot;create_stdcell_filler -lib_cell [list $create_stdcell_filler_non_metal_lib_cell_sorted]&quot;puts &quot;RM-info: $create_stdcell_filler_non_metal_cmd&quot;eval $&#123;create_stdcell_filler_non_metal_cmd&#125;connect_pg_net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加via12"><a href="#添加via12" class="headerlink" title="添加via12"></a>添加via12</h3><pre class="line-numbers language-none"><code class="language-none">#add via12set pwr_name VDDset grd_name VSSset_app_options -name plan.pgroute.via_site_threshold  -value 1set_app_options -name plan.pgroute.disable_via_creation  -value falsecreate_pg_vias  -within_bbox [get_attr [get_blocks] bbox] \ -nets &quot;$pwr_name $grd_name&quot;  \ -from_types lib_cell_pin_connect \ -from_layers M1  \  -to_layers M2 \ -allow_parallel_objects \ -blockage &quot;pg_regions : [get_attribute [get_pg_regions &quot;powerMemRegion1_*&quot;] full_name ]&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手动添加VDD-VSS-terminal"><a href="#手动添加VDD-VSS-terminal" class="headerlink" title="手动添加VDD VSS terminal"></a>手动添加VDD VSS terminal</h3><p>选中最高层金属的电源条线(选中任意一条)， <code>Create Terminal</code>, 设置Port为VDD&#x2F;VSS，Name为VDD&#x2F;VSS，Layer为对应的金属层。例如电源条线为M8时：</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121809424.png"></p><h3 id="手动添加VDD-VSS-text"><a href="#手动添加VDD-VSS-text" class="headerlink" title="手动添加VDD VSS text"></a>手动添加VDD VSS text</h3><p>Create Text，设置Text为VDD&#x2F;VSS，Layer为对应金属层(最好放在对应的电源线上，方便识别)：</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121810659.png"></p><h3 id="导出文件，保存block为-chip-finish"><a href="#导出文件，保存block为-chip-finish" class="headerlink" title="导出文件，保存block为 chip_finish"></a>导出文件，保存block为 chip_finish</h3><p>执行<code>write_verilog</code>及<code>write_gds</code>，写出网表和版图供lvs、drc使用，注意替换<code>design_name</code>。导出的文件路径为<code>pnr/outputs_icc2/</code></p><p><code>source ./user_scripts/dumExcl.tcl</code>，在当前目录下生成<code>dumExcl.list</code>供后续生成dummy使用</p><p>save as <code>design_name/chip_finish</code></p><p>&#x3D;&#x3D;注意修改命令中的DESIGN_NAME&#x3D;&#x3D;</p><p>该命令在<code>user_scripts/ref_cmd.tcl</code>里面有参考示例。</p><pre class="line-numbers language-none"><code class="language-none">#write_verilog for LVS (with pg, and with physical only cells)write_verilog -compress gzip -exclude &#123;scalar_wire_declarations leaf_module_declarations empty_modules&#125; -force_no_reference &#123;FILL16BWP30P140 FILL2BWP30P140 FILL32BWP30P140 FILL3BWP30P140 FILL4BWP30P140 FILL64BWP30P140 FILL8BWP30P140 TAPCELLBWP30P140 BOUNDARY_LEFTBWP30P140 BOUNDARY_RIGHTBWP30P140 N28_DMY_TCD_FV BEOL_small_FDM1 BEOL_small_FDM2 BEOL_small_FDM3 BEOL_small_FDM4 BEOL_small_FDM5 BEOL_small_FDM6&#125; -hierarchy all YOUR_DESIGN_NAME.lvs.v# write_gdsset_app_options -name file.gds.text_all_pins -value trueset WRITE_GDS_LAYER_MAP_FILE &#x2F;foundry&#x2F;22ULL&#x2F;TSMC22lib&#x2F;technology&#x2F;tf&#x2F;GdsOutMap&#x2F;PRTF_ICC2_22nm_8M_5X2Z.11_1a.mapwrite_gds -compress -hierarchy all -long_names -units 1000 -keep_data_type YOUR_DESIGN_NAME.gds -layer_map $WRITE_GDS_LAYER_MAP_FILE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-输出全部文件"><a href="#11-输出全部文件" class="headerlink" title="11. 输出全部文件"></a>11. 输出全部文件</h2><h3 id="导出verilog，gds等相关文件"><a href="#导出verilog，gds等相关文件" class="headerlink" title="导出verilog，gds等相关文件"></a>导出verilog，gds等相关文件</h3><p>在<code>run_pr</code>里面， 使用<code>write_data</code>命令。如果没有的话，自己手动添加即可。在设计完成之后，执行该命令可以一次性输出所有的相关文件。</p><p><del>这个命令是从<code>timing_eco_block</code>输出的文件。即上面<code>timing_eco</code>步骤的最终一个block。</del></p><p>在<code>Makefile_localsettings</code>里面, 需要确认有变量<code>write_data_from_block_name</code>. <code>write_data</code>命令从该变量所指定的block中导出数据.</p><p>导出文件的路径位<code>output_icc2/&lt;VERSION&gt;</code>文件夹</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121810216.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121810513.png"></p><h3 id="导出ndm"><a href="#导出ndm" class="headerlink" title="导出ndm"></a>导出ndm</h3><pre class="line-numbers language-none"><code class="language-none">source .&#x2F;rm_icc2_pnr_scripts&#x2F;etm_generation.tcl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>&#x3D;&#x3D;注意&#x3D;&#x3D;<br>source脚本&#x3D;&#x3D;之前&#x3D;&#x3D;，请确保<code>pnr</code>路径下有<code>in_design_starrc.cgf</code>和<code>starRC.cmd</code>文件链接。<br>如果没有的话，需要在项目路径(rtl同级目录) <code>make update &amp;&amp; make update_tmp</code><br><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121811969.png"></p></blockquote><p>顺利跑完脚本的话， 会在pnr路径下生成<code>/ETM_Lib_work_dir/</code>文件夹，以ISP项目为例，<code>/ETM_Lib_work_dir/D8M_ISP/route_opt/D8M_ISP</code>就是ndm文件(其实是个文件夹)，里面的内容如图所示。</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121812445.png"></p><h2 id="12-calibre-flow"><a href="#12-calibre-flow" class="headerlink" title="12. calibre flow"></a>12. calibre flow</h2><p>工作路径：<code>BACKEND/calibre_flow</code>文件夹</p><p>恢复初始：<code>make clean</code></p><p>包含指令：<code>make v2lvs</code>, <code>make gds_merge</code> , <code>make check_lvs</code>, <code>make check_drc</code> 等</p><h3 id="一键执行"><a href="#一键执行" class="headerlink" title="一键执行"></a>一键执行</h3><p>在<code>calibre_flow</code>文件夹，直接执行<code>make</code>. 会一键执行以下的所有步骤. 建议先分步执行，熟悉流程之后再使用该命令一键执行.</p><h3 id="步骤一：v2lvs"><a href="#步骤一：v2lvs" class="headerlink" title="步骤一：v2lvs"></a>步骤一：v2lvs</h3><p>在工作路径执行: <code>make v2lvs</code></p><p>目的是将 <code>pnr</code>生成的<code>verilog</code>文件转为<code>cdl</code>文件， 用于后续的 <code>lvs</code>检查.</p><p>此步骤需要注意的地方：</p><ol><li>需要的文件为pnr生成的<code>output_icc2/VERSION/write_data.lvs.v.gz</code>，脚本会读取此文件，如果文件名不一致的话会报错</li><li>sram的<code>cdl</code>列表，是依据sram的ndm列表生成的，请确保<code>Makefile_localsetting</code>设置无误</li></ol><h3 id="步骤二：merge"><a href="#步骤二：merge" class="headerlink" title="步骤二：merge"></a>步骤二：merge</h3><p>&#x3D;&#x3D;子模块merge&#x3D;&#x3D;</p><p>在工作路径执行: <code>make gds_merge</code></p><p>目的是将<code>icc2</code>导出的gds，std的gds以及sram的gds合并到一起，得到最终的包含所有信息的gds。</p><p>&#x3D;&#x3D;顶层merge&#x3D;&#x3D;</p><p>在工作路径执行: <code>make top_gds_merge</code></p><p>此步骤需要注意的地方：</p><ol><li>需要的文件为pnr生成的<code>output_icc2/VERSION/write_data.gds.gz</code>，脚本会读取此文件，如果文件名不一致的话会报错</li></ol><h3 id="步骤三：加dummy（省略）"><a href="#步骤三：加dummy（省略）" class="headerlink" title="步骤三：加dummy（省略）"></a>步骤三：加dummy（省略）</h3><p>22nm的不需要添加dummy，foundry会帮我们添加。</p><h3 id="步骤四：check-lvs"><a href="#步骤四：check-lvs" class="headerlink" title="步骤四：check_lvs"></a>步骤四：check_lvs</h3><p>在工作路径执行: <code>make check_lvs</code>.</p><blockquote><p>w 由于上面的命令是完全在命令行进行检查的，只能在log中来检查错误，不是很直观。主要是为了最终要finish的时候，做最后一轮检查。<br>实际工作中，使用GUI来进行操作，比较方便直观。<br>可以使用<code>make ./script/calibre.lvs</code>生成对应的lvs rule，然后按照下面的步骤，在GUI中依次执行。</p></blockquote><p>步骤如下：</p><ol><li><code>cd work_lvs</code></li><li>calibredrv 打开calibredrv图形界面</li><li>File-&gt;Open Layout Files选择<code>gds_merge/design_name.merge.gds</code></li><li>Verification-&gt;Run nmLVS</li><li>设置Rules-&gt;LVS Rules File</li><li>设置Inputs-&gt;Layout File、Netlist、H-Cells</li><li>设置Run Control-&gt;Run Calibre-&gt;Multi-Threaded</li></ol><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121812626.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121812033.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121812561.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121813190.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121813335.png"></p><h3 id="步骤五：check-drc"><a href="#步骤五：check-drc" class="headerlink" title="步骤五：check_drc"></a>步骤五：check_drc</h3><p>在工作路径执行: <code>make check_drc</code></p><blockquote><p>w 由于上面的命令是完全在命令行进行检查的，只能在log中来检查错误，不是很直观。主要是为了最终要finish的时候，做最后一轮检查。<br>实际工作中，使用GUI来进行操作，比较方便直观。<br>可以使用<code>make ./script/calibre.drc</code>生成对应的drc rule, 然后使用GUI进行操作。</p></blockquote><p>步骤如下：</p><ol><li><code>cd work_drc</code></li><li>calibredrv 打开calibredrv图形界面</li><li>File-&gt;Open Layout Files选择<code>gds_merge/design_name.merge.gds</code></li><li>Verification-&gt;Run nmDRC</li><li>设置Rules-&gt;DRC Rules File</li><li>设置Inputs-&gt;Layout File</li><li>设置Run Control-&gt;Run Calibre-&gt;Multi-Threaded</li></ol><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121813510.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121813931.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121813114.png"></p><h4 id="在icc2中打开drc报告"><a href="#在icc2中打开drc报告" class="headerlink" title="在icc2中打开drc报告"></a>在icc2中打开drc报告</h4><blockquote><p>涉及命令: <code>read_drc_error_file -file &lt;DRC_REPORT&gt;</code></p></blockquote><p>在上一步执行完了drc并生成报告之后， 可以在drc的工作目录找到<code>module_name.drc.results</code>文件</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121813256.png"></p><p>打开<code>route_opt</code>或者<code>chip_finish</code>的block，导入相应设计的<code>drc.results</code>，命令如下：<code>read_drc_error_file -file &lt;DRC_REPORT&gt;</code></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121814463.png"></p><p>Error browse中，File-&gt;Open打开error data</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121814063.png"></p><p>这样在ICC2里面就可以查看DRC的结果了</p><h2 id="13-错误报告"><a href="#13-错误报告" class="headerlink" title="13.错误报告"></a>13.错误报告</h2><p><a href="http://175.178.45.34:10086/project-8/doc-30/">点击查看:TSMC22后端常见问题总结</a></p>]]></content>
      
      
      <categories>
          
          <category> 芯片设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picgo图床+CDN加速</title>
      <link href="/posts/20240812102720.html"/>
      <url>/posts/20240812102720.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Github图床搭建流程"><a href="#1-Github图床搭建流程" class="headerlink" title="1. Github图床搭建流程"></a>1. Github图床搭建流程</h2><p>详见picgo的官方手册, 此处略过.</p><h2 id="2-CDN加速转链接"><a href="#2-CDN加速转链接" class="headerlink" title="2. CDN加速转链接"></a>2. CDN加速转链接</h2><p>将图片上传保存在 <code>github</code> 中稳定可靠, 但是在国内网络环境中无法稳定访问.  因此需要使用 CDN 加速.</p><p>只需要将 github图床的链接替换为 CDN 域名即可到达加速效果。</p><p>使用 <code>Github</code> + <code>JsDelivr</code> 的方案.  </p><blockquote><p><code>jsDelivr</code>是国外的一家优秀的公共 CDN 服务提供商，该平台是首个「打通中国大陆与海外的免费 CDN 服务」，无须担心中国防火墙问题而影响使用。<br>官网：<a href="http://www.jsdelivr.com/">http://www.jsdelivr.com/(opens new window)</a></p></blockquote><p>但是<code>jsDelivr</code>因为掉 ICP 等原因，国内速度越来越慢。好在 <a href="https://github.com/54ayao/Chinajsdelivr">Chinajsdelivr</a> 项目将它在国内“复活”了。</p><ul><li>使用 <a href="https://github.com/54ayao/Chinajsdelivr">Chinajsdelivr</a> 进行加速，域名为<code>cdn.jsdmirror.com</code></li><li>使用原版 <code>jsDelivr</code> 进行加速，域名为<code>cdn.jsDelivr.net</code></li></ul><p>例如加速 github 文件只需要将 github 的文件地址转换成如下地址即可：</p><p><code>https://cdn.jsdmirror.com/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code>. </p><p>其中 <code>@发布的版本号</code> 是非必需的，如果不带默认取的是仓库主分支的最新文件。</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token operator">#</span> 原本图床链接<span class="token url">https://raw.githubusercontent.com/sustcsugar/picgo/main/img/202408091050297.png</span><span class="token operator">#</span> CDN加速转链后的链接<span class="token url">https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/202408091050297.png</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Picgo自动转链-建议使用Piclist"><a href="#3-Picgo自动转链-建议使用Piclist" class="headerlink" title="3. Picgo自动转链(建议使用Piclist)"></a>3. Picgo自动转链(建议使用Piclist)</h2><p>在picgo的图床设置中, 填入自定义域名. 注意需要和上述的 CDN 加速的链接一致.</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121352800.png"></p><h2 id="4-PicList"><a href="#4-PicList" class="headerlink" title="4. PicList"></a>4. PicList</h2><blockquote><p>Picgo 只能上传图片到图床, 无法删除图床从的图片.<br><a href="https://github.com/Kuingsmile/PicList">Piclist</a> 是基于picgo 开发的新图床软件, 增加了很多实用的功能.  支持高级重命名, 支持水印等. 可以进行完整的多平台云存储管理功能，上传、下载、删除一站式解决</p></blockquote><h3 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1. 安装"></a>4.1. 安装</h3><pre class="line-numbers language-none"><code class="language-none">brew install piclist --cask   # 安装brew uninstall piclist        # 删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2. 使用"></a>4.2. 使用</h3><p>和 <code>picgo</code>的使用方法一致, 增加了许多新功能. 从picgo中一键迁移即可. </p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ol><li><a href="https://cloud.tencent.com/developer/article/1651601">https://cloud.tencent.com/developer/article/1651601</a></li><li><a href="https://www.yuhuizhen.com/2022/11/27/image-bed/index.html">https://www.yuhuizhen.com/2022/11/27/image-bed/index.html</a></li><li><a href="https://www.haoyep.com/posts/github-graph-beds-cdn/">https://www.haoyep.com/posts/github-graph-beds-cdn/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>obsidian+hexo沉浸式工作流程</title>
      <link href="/posts/20240809104418.html"/>
      <url>/posts/20240809104418.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p>笔者常用的笔记工具为obsidian, 日常工作生活中积累的笔记均在ob中保存.</p><p>为了保持博客和笔记的一致性, 同时减少繁复的博客部署工作.</p><p>探索了使用ob编写文章, 保持其格式完美符合hexo的渲染支持, 同时保持YAML也一直, 便于hexo进行建站和检索. </p><p>然后推送到repo中, 利用 github actions 来自动编译部署博客.</p><p>实现文章的一次编写, 多处复用!</p><h2 id="2-结构"><a href="#2-结构" class="headerlink" title="2. 结构"></a>2. 结构</h2><p>使用 ob 打开 hexo 根路径, 将其作为 Vault . 在此基础上安装 ob 插件.</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121614388.png"></p><h2 id="3-插件列表"><a href="#3-插件列表" class="headerlink" title="3. 插件列表"></a>3. 插件列表</h2><blockquote><p>对于插件的筛选标准就是, 尽可能的少, 绝对不能修改markdown的样式, 保证百分百为 markdown原生样式. </p><p>主要的目的就是为了统一文章格式, 尤其是 <code>yml</code>元数据. 简化工作流程以及出错的概率. 同时保证每篇文章有稳定且唯一的 ID 作为永久 link , 方便后续文章 url 的链接以及引用. </p></blockquote><p>插件列表如下 : </p><ul><li>Linter - 格式化文章内容</li><li>Number Headings - 给标题添加序号</li><li>Tag Wrangler - 全局标签管理</li><li>Templater - 模版插件方便写作</li><li>Image auto upload plugin - 图床插件</li></ul><h2 id="4-文章发表"><a href="#4-文章发表" class="headerlink" title="4. 文章发表"></a>4. 文章发表</h2><p>目前的工作流程是: </p><ol><li>在ob仓库中编写和管理文章, 利用插件修改文章格式以符合 hexo 的规范. </li><li>在 vscode 中通过 git 插件查看文章变动, 确保无误. </li><li>push 修改到 github</li><li>通过 github actions 自动编译部署博客, 全程无需本地编译, 对本地环境没有依赖.</li></ol><h2 id="5-写在最后"><a href="#5-写在最后" class="headerlink" title="5. 写在最后"></a>5. 写在最后</h2><p>希望自己能坚持下来持续输出博客内容.</p><p>希望自己能不断进步, 此文能不断地更新改进.</p><p>加油 ! ✍️✍️✍️</p>]]></content>
      
      
      <categories>
          
          <category> 文字工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo静态博客学习-github-actions自动部署</title>
      <link href="/posts/20240809002706.html"/>
      <url>/posts/20240809002706.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>利用Github Actions，我们就能建立两个代码仓库，比如：</p><ul><li><code>blog_src</code>：私有，保存源代码，内有个人数据</li><li><code>blog.github.io</code>：公开，大家访问的资源</li></ul><p>然后借助Github Actions关联起来, 将文章推送到<code>blog_src</code>之后, 触发<code>action</code>自动生成新的静态页面, 访问<code>github.io</code>即可.</p><h2 id="2-生成ssh密钥对"><a href="#2-生成ssh密钥对" class="headerlink" title="2. 生成ssh密钥对"></a>2. 生成ssh密钥对</h2><p>使用下面的命令生成 ssh 秘钥对, 会生成两个文件, 一个私钥和一个公钥(.pub结尾).</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">"your_email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-1-公钥"><a href="#2-1-公钥" class="headerlink" title="2.1. 公钥"></a>2.1. 公钥</h3><blockquote><p>复制公钥到github中, 放在网页所在的仓库</p></blockquote><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121530656.png" alt="image.png"></p><h3 id="2-2-私钥"><a href="#2-2-私钥" class="headerlink" title="2.2. 私钥"></a>2.2. 私钥</h3><blockquote><p>复制私钥到githu中, 放在代码所在的仓库, 并且创建环境变量<code>HEXO_DEPLOY_KEY</code></p></blockquote><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121535111.png" alt="image.png"></p><h3 id="2-3-公钥格式问题"><a href="#2-3-公钥格式问题" class="headerlink" title="2.3. 公钥格式问题"></a>2.3. 公钥格式问题</h3><p>需要注意的是, 在win中打开公钥文件,复制公钥到 github 中,可能会提示公钥格式有问题. </p><p>这个问题的本质在于使用 win 打开公钥文件,会自动的修改其格式或者编码,导致 github 不认. </p><p>目前没有找到比较合适的工具去查看公钥文件的 raw 数据,因此无法定位到底是哪个格式问题导致的.</p><p>这个问题网上有几种方案, 但是每一种我都尝试了, 都无法解决. </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gvim ssh_rsa.pub  <span class="token comment"># 使用vim打开并复制</span>noteapd ssh_rsa.pub  <span class="token comment"># 使用notepad打开并复制</span>notepad++ ssh_rsa.pub  <span class="token comment"># 使用notepad++打开并复制</span><span class="token function">cat</span> ssh_rsa.pub <span class="token comment"># 在terminal中打印并复制</span>clip <span class="token operator">&lt;</span> ssh_rsa.pub  <span class="token comment"># 直接将文件内容复制到剪贴板</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>甚至尝试了在 WSL 复制公钥, 以及打开VMware 中 linux 虚拟机复制公钥. 都会提示格式不对. </p><p>最终还是在 macos 中将公钥粘贴到了 github 中. </p><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><ol><li><a href="https://blog.csdn.net/lpl0223/article/details/137436353">https://blog.csdn.net/lpl0223/article/details/137436353</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 文字工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo静态博客学习-matery主题美化</title>
      <link href="/posts/20240808003617.html"/>
      <url>/posts/20240808003617.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-首页颜色变化"><a href="#1-首页颜色变化" class="headerlink" title="1. 首页颜色变化"></a>1. 首页颜色变化</h2><p>修改文件 : <code>/source/css/matery.css</code>, 搜索 <code>rainbow</code> 来关闭颜色变换：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/* 动态切换背景颜色.即滤镜颜色，不想要可以全部注释，或者换成你喜欢的颜色 */</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 动态切换背景颜色.，不想要可以全部注释，或者换成你喜欢的颜色 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-导航栏颜色"><a href="#2-导航栏颜色" class="headerlink" title="2. 导航栏颜色"></a>2. 导航栏颜色</h2><p>修改<code>matery.css</code>文件<code>.bg-color</code>选择器</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.bg-color</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #e657ce 0%<span class="token punctuation">,</span> #1059e0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-卡片区背景"><a href="#3-卡片区背景" class="headerlink" title="3. 卡片区背景"></a>3. 卡片区背景</h2><p>修改<code>matery.css</code>文件<code>body</code>选择器</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> #eaeaea<span class="token punctuation">;</span>     <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>60deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>224<span class="token punctuation">,</span>255<span class="token punctuation">,</span>125<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span> 5%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 228<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.35<span class="token punctuation">)</span><span class="token punctuation">)</span> 0% 0% / cover<span class="token punctuation">;</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>     <span class="token property">color</span><span class="token punctuation">:</span> #34495e<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-文章封面生成"><a href="#4-文章封面生成" class="headerlink" title="4. 文章封面生成"></a>4. 文章封面生成</h2><p>使用此网站 : <a href="https://cover.qyliu.top/editor">https://cover.qyliu.top/editor</a></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121936031.png"></p><h2 id="5-代码块修改"><a href="#5-代码块修改" class="headerlink" title="5. 代码块修改"></a>5. 代码块修改</h2><blockquote><p><code>hexo + matery</code> 自带的代码块渲染后出问题</p><ol><li>高亮效果太差了，不好看。</li><li>格式渲染也有问题。<br><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/202408081052616.png"></li></ol></blockquote><h3 id="5-1-代码高亮"><a href="#5-1-代码高亮" class="headerlink" title="5.1. 代码高亮"></a>5.1. 代码高亮</h3><p>按照下面步骤修改根目录的 <code>config</code> 文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 根目录的 _config.yml</span><span class="token comment"># hexo 版本 7.0.0以上时,需要设置 highlighter 选项</span><span class="token comment"># 这里需要注意,要把 highlighter 修改为 prismjs (注意不是prism.js)</span><span class="token key atrule">syntax_highlighter</span><span class="token punctuation">:</span> prismjs<span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># hexo 官方支持的prism</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># prism 插件</span><span class="token comment"># 由于 hexo 官方已经支持了 prism ,所以就不需要安装 prism-plugin 了,如果已经安装了,卸载即可</span><span class="token comment"># 安装插件 npm i -S hexo-prism-plugin</span><span class="token comment"># 卸载插件 npm uninstall hexo-prism-plugin</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># matery theme 中的 _config.yml</span><span class="token comment"># 代码块相关</span><span class="token key atrule">code</span><span class="token punctuation">:</span>  <span class="token key atrule">lang</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 代码块是否显示名称</span>  <span class="token key atrule">copy</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 代码块是否可复制</span>  <span class="token key atrule">shrink</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 代码块是否可以收缩</span>  <span class="token key atrule">break</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 代码是否折行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-代码行号"><a href="#5-2-代码行号" class="headerlink" title="5.2. 代码行号"></a>5.2. 代码行号</h3><p>设置完之后发现代码块不显示行号,参考<a href="https://blog.csdn.net/weixin_45453133/article/details/120853394">这篇文章</a>发现是<code>matery</code>对<code>prism.css</code>的适配出问题了,需要修改主题中的<code>prism.css</code>文件.</p><p>按照这个方法修改<code>prism.css</code>文件之后, 显示行号了,但是选择代码时后出现错位问题. 这个问题现在还没有解决.</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/202408081608464.png"></p><h3 id="5-3-代码折行"><a href="#5-3-代码折行" class="headerlink" title="5.3. 代码折行"></a>5.3. 代码折行</h3><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"># 这个代码块没什么用处, 仅仅是为了查看效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waves-effect waves-light faa-parent animated-hover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-更换字体"><a href="#6-更换字体" class="headerlink" title="6. 更换字体"></a>6. 更换字体</h2><blockquote><p>更换字体一个很麻烦的问题是,使用本地字体时,打开网页需要加载字体. 如果字体文件较大,会十分影响网页的加载速度.</p><p>因此可以进行取舍, 使用大多数设备都支持的本地预装字体. 或者使用web字体.</p></blockquote><h3 id="6-1-全局更换字体"><a href="#6-1-全局更换字体" class="headerlink" title="6.1. 全局更换字体"></a>6.1. 全局更换字体</h3><p>在<code>hexo</code>根目录下创建并添加字体文件<code>/source/font/myfont.ttf</code>.</p><p>然后进入主题文件夹<code>/themes/hexo-theme-matery/source/css/my.css</code>, 在其中添加下面的<code>css</code>片段用来控制全局字体.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'myFont'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/myFont.ttf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span><span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'myFont'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-局部更换字体"><a href="#6-2-局部更换字体" class="headerlink" title="6.2. 局部更换字体"></a>6.2. 局部更换字体</h3><p>和全局字体类似, 通过网页审查工具,找到想要修改字体的网页元素,然后修改<code>my.css</code>文件来修改字体.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'navFont'</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../font/jianqiti.ttf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">nav</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'navFont'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-Web安全字体"><a href="#6-3-Web安全字体" class="headerlink" title="6.3. Web安全字体"></a>6.3. Web安全字体</h3><blockquote><p>使用广泛支持的“Web安全”字体可以显著减少网页加载时间，因为这些字体通常已经安装在大多数用户的系统上，不需要额外下载。</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Songti SC"</span><span class="token punctuation">,</span> SimSun<span class="token punctuation">,</span><span class="token string">"宋体"</span><span class="token punctuation">,</span><span class="token string">"仿宋"</span><span class="token punctuation">,</span> <span class="token string">"微软雅黑"</span><span class="token punctuation">,</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-4-精简字体"><a href="#6-4-精简字体" class="headerlink" title="6.4. 精简字体"></a>6.4. 精简字体</h3><p>网页为了美观可能需要单独加载字体文件，字体文件一般比较大（接近 10M ），并且字体文件中大部分字符都用不到。可以通过删除不常用文字，来减小字体文件大小，加快网页访问速度。</p><p><a href="https://cyh.me/posts/font-minification/">https://cyh.me/posts/font-minification/</a></p><p><a href="https://www.bejson.com/ui/font/">在线查看字体文件-纯前端实现</a></p><p><a href="https://github.com/DeronW/minify-font">minifont字体精简工具</a></p><h2 id="7-友商"><a href="#7-友商" class="headerlink" title="7. 友商"></a>7. 友商</h2><ol><li><a href="https://small-rose.github.io/">https://small-rose.github.io/</a></li><li><a href="https://marmalade.vip/">https://marmalade.vip/</a></li><li><a href="https://zahui.fan/">https://zahui.fan/</a></li><li><a href="https://blog.liushen.fun/">https://blog.liushen.fun/</a></li></ol><h2 id="8-Reference"><a href="#8-Reference" class="headerlink" title="8. Reference"></a>8. Reference</h2><ol><li><a href="https://small-rose.github.io/posts/a53a9069.html">Matery主题新手常见问题</a></li><li><a href="https://cloud.tencent.com/developer/article/2148822">Matery之代码块优化</a></li><li><a href="https://www.rewind.show/2020/12/23/BUG%E5%A4%84%E7%90%86/matery%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">matery主题的代码块问题解决</a></li><li><a href="https://hexo.io/zh-cn/docs/syntax-highlight#PrismJS">Hexo官方教程-语法高亮</a></li><li><a href="https://marmalade.vip/Materysettings2.html#toc-heading-8">Marmalade’s Blog Hexo-Matery主题细致美化(下)</a></li><li><a href="https://wyqz.top/p/3418896117.html">代码块问题修复-尝试-Hexo踩坑实记</a></li><li><a href="https://blog.17lai.site/posts/4a2050e2/">https://blog.17lai.site/posts/4a2050e2/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 文字工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo静态博客学习-插件安装</title>
      <link href="/posts/20240807230924.html"/>
      <url>/posts/20240807230924.html</url>
      
        <content type="html"><![CDATA[<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><blockquote><p>列出所安装的插件<br>插件的使用和配置在文章后面会逐个说明</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink <span class="token parameter variable">--save</span>          <span class="token comment"># 永久链接,修改文章url格式</span><span class="token function">npm</span> <span class="token function">install</span> hexo-reading-time <span class="token parameter variable">--save</span>      <span class="token comment"># 显示阅读时长</span><span class="token function">npm</span> i <span class="token parameter variable">--save</span> hexo-wordcount               <span class="token comment"># 文章字数+阅读时长统计</span><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search <span class="token parameter variable">--save</span>  <span class="token comment"># 文章搜索插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="永久链接配置"><a href="#永久链接配置" class="headerlink" title="永久链接配置"></a>永久链接配置</h2><blockquote><p>在生成的 abbrlink 前面添加时间戳，增加可读性<br><a href="https://github.com/ohroy/hexo-abbrlink">abbrlink官方</a></p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># permalink: :year/:month/:day/:title/</span><span class="token comment"># permalink_defaults:</span><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>year<span class="token punctuation">:</span>month<span class="token punctuation">:</span>day<span class="token punctuation">:</span>hour<span class="token punctuation">:</span>minute<span class="token punctuation">:</span>second<span class="token punctuation">-</span><span class="token punctuation">:</span>abbrlink.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32  <span class="token comment"># 算法：crc16(default) and crc32</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex    <span class="token comment"># 进制：dec(default) and hex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="显示阅读时长"><a href="#显示阅读时长" class="headerlink" title="显示阅读时长"></a>显示阅读时长</h2><blockquote><p>matery主题中自带了该配置，只需要按照注释下载对应的插件即可</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Post word count, reading duration, site total word count.</span><span class="token comment"># Before you activate, please confirm that you have installed the hexo-wordcount plugin,</span><span class="token comment"># install the plugin command: `npm i --save hexo-wordcount`.</span><span class="token comment"># 文章字数统计、阅读时长、总字数统计等</span><span class="token comment"># 文章信息--若要开启文章字数统计，需要安装 hexo-wordcount 插件，安装命令: `npm i --save hexo-wordcount`</span><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 发布日期</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 更新日期</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章字数统计</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 站点总文章字数</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章阅读时长</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 文章阅读次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章搜索功能"><a href="#文章搜索功能" class="headerlink" title="文章搜索功能"></a>文章搜索功能</h2><p>修改根目录的 <code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 文字工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo静态博客学习-基础使用</title>
      <link href="/posts/20240807180233.html"/>
      <url>/posts/20240807180233.html</url>
      
        <content type="html"><![CDATA[<h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><p>安装 <code>hexo</code>及生成网页一条龙, 按照下面的命令即可.</p><p>可以生成一个最简单的demo界面.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span>hexo init blog<span class="token builtin class-name">cd</span> blog<span class="token function">npm</span> <span class="token function">install</span>hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cl 或 hexo clean      //清空public文件夹内容hexo g 或  hexo generate   //在hexo站点根目录下生成public文件夹，相关静态网页文件hexo s 或  hexo server     //启动服务预览 http://localhost:4000hexo d 或  hexo deploy     //部署站点，在本地生成.deploy_git文件夹，并将编译后的文件上传至 Git远程仓库，如github或自己搭建的远程服务器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="config-yml-说明"><a href="#config-yml-说明" class="headerlink" title="config.yml 说明"></a>config.yml 说明</h2><h2 id="项目文件结构"><a href="#项目文件结构" class="headerlink" title="项目文件结构"></a>项目文件结构</h2><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>deploy_git  <span class="token operator">#</span> 部署git的本地仓库<span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">/</span><span class="token punctuation">.</span>git         <span class="token operator">#</span> git相关文件<span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/node_modules</span>  <span class="token operator">#</span> 安装插件时存放插件的目录<span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/public</span>       <span class="token operator">#</span> 执行 hexo cl 会删除该文件夹，执行hexo g 会生成该文件，hexo s 启动也是将本目录作为本地服务器目录<span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/source</span>       <span class="token operator">#</span> md 文章页面文件，一般自定义页面会在这里放<span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/_posts</span>  <span class="token operator">#</span> 自己放文章的目录，内部目录结构随便创建<span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/about</span>  <span class="token operator">#</span> 关于页面<span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/categories</span>  <span class="token operator">#</span> 分类页面<span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/friends</span>  <span class="token operator">#</span> 友链页面<span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/search</span>  <span class="token operator">#</span> 搜索页面<span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/tags</span>  <span class="token operator">#</span> 标签页面<span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> 其他页面，就不一一列举了<span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/themes</span>      <span class="token operator">#</span> 主题存放目录<span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/landscape</span> <span class="token operator">#</span> 默认下载的主题<span class="token operator">|</span>      <span class="token operator">|</span><span class="token operator">|</span>     <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/hexo-theme-matery</span>  <span class="token operator">#</span> 你自己下载的其他主题目录，我的是matery<span class="token operator">|</span>          <span class="token operator">|</span><span class="token operator">|</span>          <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/languages</span>  <span class="token operator">#</span> 主题的语言支持目录<span class="token operator">|</span>          <span class="token operator">|</span><span class="token operator">|</span>          <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/layout</span>   <span class="token operator">#</span> 主题的模板布局目录，ejs、pug等模板文件之类的等<span class="token operator">|</span>          <span class="token operator">|</span><span class="token operator">|</span>          <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/scripts</span>  <span class="token operator">#</span> 主题渲染相关脚本相关，一般不需要改动<span class="token operator">|</span>          <span class="token operator">|</span><span class="token operator">|</span>          <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/source</span>   <span class="token operator">#</span> 主题的一些静态资源文件夹，如css样式，js文件，图片文件等<span class="token operator">|</span>          <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>          <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/css</span>  <span class="token operator">#</span> 主题页面使用的相关样式文件<span class="token operator">|</span>          <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>          <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/js</span>   <span class="token operator">#</span> 主题页面使用的相关脚本，<span class="token operator">|</span>          <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>          <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/images</span>   <span class="token operator">#</span> 主题相关图片文件<span class="token operator">|</span>          <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>          <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token file-path string">/libs</span>  <span class="token operator">#</span> 主题相关第三方插件<span class="token operator">|</span>          <span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>          <span class="token operator">|</span>    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> 其他名字的目录或者文件 <span class="token operator">|</span>          <span class="token operator">|</span><span class="token operator">|</span>          <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> _config<span class="token punctuation">.</span>yml  <span class="token operator">#</span> 主题配置文件，非常重要<span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> _config<span class="token punctuation">.</span>yml  <span class="token operator">#</span> hexo 根目录配置文件，非常重要<span class="token operator">|</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token domain constant">package.json</span>  <span class="token operator">#</span> hexo 安装插件的描述文件，比较重要，如果你换目录，换电脑，有这个文件就可以直接安装之前安装过的插件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="生成链接错误"><a href="#生成链接错误" class="headerlink" title="生成链接错误"></a>生成链接错误</h3><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/202408071823773.png"></p><blockquote><p>解决办法<br>hexo+matery主题好像不支持使用子仓库作为pages使用.<br>用户名为sustcsugar,仓库名为sugar.github.io<br>此时pages的链接为sustcsugar.github.io&#x2F;sugar.github.io<br>这样的链接会识别错误<br>将仓库改名为sustcsugar.github.io即可</p></blockquote><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://small-rose.github.io/posts/9f117b.html">Hexo搭建静态博客（一）——基础搭建</a></p>]]></content>
      
      
      <categories>
          
          <category> 文字工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mkdocs使用手册</title>
      <link href="/posts/20240807140429.html"/>
      <url>/posts/20240807140429.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>需要 python 环境，使用 pip 安装.<code>pip install mkdocs</code></p><p>安装完之后，可以使用 <code>which mkdocs</code> 检查.</p><h2 id="3-开始"><a href="#3-开始" class="headerlink" title="3. 开始"></a>3. 开始</h2><h3 id="3-1-创建新项目"><a href="#3-1-创建新项目" class="headerlink" title="3.1. 创建新项目"></a>3.1. 创建新项目</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdocs new my-project<span class="token builtin class-name">cd</span> my-project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有一个配置文件 <code>mkdocs.yml</code>, 和一个包含文档源码的 <code>docs</code> 文件夹. 在 <code>docs</code> 文件夹里包含了一个名为 <code>index.md</code> 的文档.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tree <span class="token parameter variable">-C</span><span class="token builtin class-name">.</span><span class="token operator">|</span>-- docs<span class="token operator">|</span>   <span class="token variable"><span class="token variable">`</span>-- index.md<span class="token variable">`</span></span>-- mkdocs.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h2><p>配置文件为 <code>yml</code> 格式的,语法需要注意:</p><ul><li><code>nav</code> 中的文件名,需要<strong>双引号</strong>, 标签名不需要引号.</li><li><code>markdown_extentions</code> 中的冒号,需要空格</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">site_name</span><span class="token punctuation">:</span> Sugar's Docs<span class="token key atrule">nav</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"index.md"</span>  <span class="token punctuation">-</span> <span class="token key atrule">Docsify</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"docsify搭建记录.md"</span><span class="token key atrule">markdown_extentions</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">toc</span><span class="token punctuation">:</span>    <span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>  <span class="token punctuation">-</span> footnotes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-主题配置"><a href="#5-主题配置" class="headerlink" title="5. 主题配置"></a>5. 主题配置</h2><p>在<code>mkdocs.yml</code>中添加主题配置，可以修改主题。 <code>material</code>为<a href="https://squidfunk.github.io/mkdocs-material/">第三方主题</a>，需要额外安装。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> material<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-Reference"><a href="#5-Reference" class="headerlink" title="5. Reference"></a>5. Reference</h2><ol><li><a href="https://markdown-docs-zh.readthedocs.io/zh_CN/latest/">MkDocs 中文文档 (markdown-docs-zh.readthedocs.io)</a></li><li><a href="https://sspai.com/prime/story/mkdocs-primer">笔记文档一把梭——MkDocs 快速上手指南 ｜ 少数派会员 π+Prime (sspai.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 文字工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IC后端-数字后端库转换</title>
      <link href="/posts/20211213122950.html"/>
      <url>/posts/20211213122950.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-lib-转-Db"><a href="#1-lib-转-Db" class="headerlink" title="1.lib 转 Db"></a>1.lib 转 Db</h2><p><strong>使用工具：Library Compiler</strong></p><p>步骤：</p><p>i. 准备好 <code>.lib</code> 文件并放在 <code>gen_db</code> 文件夹（lib 转 db 工作目录）下，<code>lc_shell -gui &amp;</code> 打开 Library Compiler 图形界面</p><p>ii. 在 LC 界面执行 <code>read_lib _logic_lib_name_.lib</code></p><p>iii. 在 LC 界面执行 <code>write_lib -format db _logic_lib_name_ -output _logic_lib_name_.db</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 参考脚本</span>read_lib anlab/stuhome/zngz2/sram/RAMUHDDP4096x128bit/NLDM/RAMUHDDP4096x128bit_ffg0p99v0c.libwrite_lib <span class="token parameter variable">-format</span> db RAMUHDDP4096x128bit_ffg0p99v0c <span class="token parameter variable">-output</span> ~/sram/lib2db/RAMUHDDP4096x128bit/RAMUHDDP4096x128bit_ffg0p99v0c.db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-lef-转-Mw"><a href="#2-lef-转-Mw" class="headerlink" title="2.lef 转 Mw"></a>2.lef 转 Mw</h2><p><strong>使用工具：Milkyway</strong></p><p>步骤：</p><p>i. 准备好相应 <code>.lef</code> 文件、<code>db</code> 库、<code>.tf</code> 文件、<code>script_name.scm</code> 转换脚本文件并放在 <code>gen_mw</code> 文件夹（lef 转 mw 工作目录）下，<code>Milkyway -galaxy &amp;</code> 打开 Milkyway 图形界面</p><p>ii. 在 Milkyway 界面执行 <code> load “script_name.scm”</code></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121833849.png"></p><p><code>script_name.scm</code> 文件参考：</p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121833738.png"></p><p><img src="https://cdn.jsdmirror.com/gh/sustcsugar/picgo/img/2024/08/202408121833893.png"></p><h2 id="3-转-Ndm"><a href="#3-转-Ndm" class="headerlink" title="3. 转 Ndm"></a>3. 转 Ndm</h2><p>  准备文件：tf，lef，db</p><ul><li>使用软件：&#x3D;&#x3D;ICC2_LM&#x3D;&#x3D;</li><li>启动软件：<code>icc2_lm_shell -gui</code></li><li>参考脚本：</li></ul><pre class="line-numbers language-tcl" data-language="tcl"><code class="language-tcl"><span class="token comment">#ndm.tcl</span>set_app_options <span class="token operator">-</span>name shell.common.report_default_significant_digits <span class="token operator">-</span>value 3create_workspace <span class="token operator">-</span>flow normal <span class="token operator">-</span>technology <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>tsmc28nm<span class="token operator">/</span>tf<span class="token operator">/</span>tsmcn28_10lm5X2Y2RUTRDL.tf RAMlinebuffer256x112bitread_lef <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>tsmc28nm<span class="token operator">/</span>tsmcn28_10lm5X2Y2RUTRDL.tlef<span class="token comment">#remove_site_defs *</span><span class="token comment">#create_site_def -name unit -height 0.900 -width 0.140</span><span class="token comment">#set_attribute [get_site_defs unit] is_default true</span>read_lef <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>lef<span class="token operator">/</span>RAMlinebuffer256x112bit.lefread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ffg0p99v0c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ffg0p99v125c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ffg0p99vm40c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ffg1p05v0c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ffg1p05v125c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ffg1p05vm40c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ssg0p81v0c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ssg0p81v125c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ssg0p81vm40c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ssg0p9v0c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ssg0p9v125c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_ssg0p9vm40c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_tt0p9v25c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_tt0p9v85c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_tt1v25c.dbread_db <span class="token operator">/</span>foundry<span class="token operator">/</span>BACK_END_scripts<span class="token operator">/</span>3dnr_pr<span class="token operator">/</span>technology<span class="token operator">/</span>db<span class="token operator">/</span>ram<span class="token operator">/</span>RAMlinebuffer256x112bit<span class="token operator">/</span>RAMlinebuffer256x112bit_tt1v85c.dbcurrent_workspacecheck_workspacecommit_workspace <span class="token operator">-</span>output RAMlinebuffer256x112bit.ndm  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用脚本，在软件内：<code>source ndm.tcl</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 芯片设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
